Experiencias y reflexiones en el diseño de librerías
====================================================

:author: Juan B Cabral

Pycon Argentina 2011


Disclaimer/s
------------

    * La charla no trata estrictamente de Python. 
    * Mucho de esto esta sacado de Java (y su horrible forma de obligarte a hacer cosas feas)
    * Java sirve para algo: not(**Te enseña como hacer cosas feas**)
    * Surge como una duda personal de como saber si lo que hago esta bien. (aca lo malo si funciona).
    * Recomiendo un libro: **Practical API Design**
    
      Mucha de mi charla se basa en este libro.
    


Librerías
---------

    * Las usamos para resolver problemas comunes.
    * Sabemos **que** hacen pero no **como** lo hacen.
    * Nos da un suficiente nivel de "desconocimiento" (clueless).
    * Accedemos a traves de sus APIS (asi que la charla se centra en eso)
    * Una buena API tiene un correctonivel de "clueless"


API VS SPI
----------
    
    **API:** un **coso** externo le pide **algo** a nuestro programa y luego
    el **coso** recupera el control.
      
    **SPI:** nuestro programa le pide **algo** a un **coso** externo y luego
    nuestro programa recupera el control.
    
    **Mantenerlas separadas es EXELENTE IDEA**
    
        - API favorece la flexibilidad (generalmente)
        - SPI la seguridad (generalmente)
    
    Disclaimer: recien estoy estudiando como diseñar bien SPI.


No Clueless
-----------

    - Leer mi twitter "http://www.twitter.com/!#/juanbcabral"
    
        Implica saber: Http, Programar un navegador web, un sistema operativo con
        las 4 capas del modelo TCP/IP, microelectronica para procesar, comunicaciones
        para enviar datos por cable... muchas cosas que me saltee por fiaca.
        
    - Nadie sabe todo lo necesario para volar un avion.
    

Clueless
--------

    * La ignorancia es un beneficio.
    * Disminuyen el rediseño de la rueda 4.0.
    * Nos ayudan a enfocar en un problema.
    * Esta para quedarse.
    * No significa "no saber".
    * Python es altamente "clueless".


Zen Vs. Zen
-----------

    * Las librerias almenos contradicen de alguna manera el "zen" de python:
        - Explicit is better than implicit.
        - Flat is better than nested.
        - Special cases aren't special enough to break the rules.
        - There should be one-- and preferably only one --obvious way to do it.
        
    * Recordar:
        - Although practicality beats purity.
        - Namespaces are one honking great idea -- let's do more of those!
        
        
Y...
----

    Como no me da la cara para decir "esta es la posta" agrupe el resto de la
    charla en una sucesion de consejos


Consejo: API (PROPIAMENTE HABLANDO)
-----------------------------------

    - Exponer solo los metodos necesarios
    - Tamaño de un api: ``len([n for n in dir(obj) if not n.startswith("_")])``
    - Darle muchos derechos al constructor (inmutabilidad)
    - No exponer jerarquias profundad: No es lo mismo diseñar para la API que para reusar codigo.


Consejo: Cooperación con otras Apis
-----------------------------------

    - Compatibilidad con las pilas.
    - Ojo con retornar objetos de otras APIS (disminuye el clueless)
    - Ojo con redefinir comportamiento de otras apis  (aumenta el acoplamiento)


Consejo: Mis tipos, tus tipos
-----------------------------
    
    - De preferencia **NO** exponer objetos propios como resultados de operaciones.
    
    - Dos librerias mias:
         - **csvcool:** Manipula csv y la funcion read devuelve una instancia de ``CSVCool``
         - **django-hatconf:** Configuraciones distribuidad que usa ``settings.py`` de django como schema
        
    - Aplica tambien a mundo web:
        - XML: NO
        - JSON/YAML: SI
    
    

Consejo: Tipos
--------------

    - Los controles de tipos deben hacerse en el nivel de **APIS**
    - Los Controles de tipos llevan tiempo.
    - Los assert son buenas ideas para validar tipos
    
        def foo(arg):
            assert isinstance(arg, Something), "Bad Type expected {0}".format(Something.__name__)
            do something
    
    
Consejo: Errores
----------------

    - Llamamos errores a algo inmanejable por nuestra libreria.
    - Si un error se puede subsanar es mejor hacerlo.
    - Errors should never pass silently, Unless explicitly silenced.
    - Crear exceptions propias puede ser un arma de doble filo.
        - Aumenta la capacidad de manejar errores desde la aplicacion cliente
        - Disminuye la homogeneidad con las **pilas**


Cosejo: Inmutabilidad Rulz!
---------------------------

    Si van a definir objetos intentar que sean inmutables (aumenta bastante la
    estabilidad de la libreria... bueno no realmente)
    
    - Si un objeto es **inmutable**: TRATAR de redefinir ``__repr__``, 
      ``__str__``, ``__hash__``, ``__cmp__``, ``__eq__`` y ``__ne__``.
    
    - Si un objeto es **mutable**: 
        - controlar mucho lo que llega por las API.
        - Redefinir: ``__repr__``,  ``__str__``, ``__cmp__``, 
          ``__eq__`` y ``__ne__``.


Consejos: Publicación
---------------------

    * No publiquen sin tests. (Deberia existir algo asi como la **Ley Bidart**)
    * TDD se merece una 
    * Publiquen de manera comunes a los developers python (pypi > ppa).
    * No publiquen sin documentacion.
    


Consejo: Portando
-----------------

**Lo importante es**

    * Facilitar a la vida a los desarrolladores python:
        - Respetar pep8: ``assertTrue -> assert_true/ asserttrue``
        - Utilizar funciones de python: ``obj.length() -> len(obj)``
        - Utilizar metodos de python: ``obj.appendChild(aobj) -> obj.append(aobj)``
        
    * Que vengan del lenguaje de la libreria original.
        - Python no es Java
        
Consejos: Finales
-----------------

    - Hacer codigo mantenible
    - Hacer que nuestras cosas internas cumplan muchas de las cosas que dijimos.
    - Las apis simetricas son buena idea (load, dump).
    - Tratar de cumplir en su totalidad el zen de python.
    - Compatibilidad pa'tras
    - No abusar de los patrones.
    - Todo es cuestion de diseño (Dry or not dry)
    - Evitar el monkeypatch.
    - TDD rules


¿Preguntas?
-----------

    - Charlas:
        - http://bitbucket.org/leliel12/talks
    - Contacto:
        - Juan B Cabral 
            - Mail: `jbc.develop@gmail.com <mailto:jbc.develop@gmail.com>`_
            - Twitter: `@JuanBCabral <http://twitter.com/JuanBCabral/>`_
            - Blog: http://jbcabral.wordpress.com/

            
.. footer:: 
    PyCon Argentina - Junin, Bs. As. 10/2011

.. header::
    Lib Free or Die Hard
